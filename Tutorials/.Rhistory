pmap(rnorm)
params <- tibble(
mean = unlist(mu),
sd = unlist(sigma),
n = unlist(m)
)
params
params %>%
pmap(rnorm)
x <- list(1, "a", 3)
x %>%
walk(print)
dir.crate("images")
dir.create("images")
dir.create("images")
plots <- mtcars %>%
split(.$cyl) %>%
map(~ggplot(., aes(mpg, wt)) + geom_point())
paths <- stringr::str_c(names(plots), ".pdf") #generate strings of names
pwalk(list(paths, plots), ggsave, path = "images/")
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
str(df)
mean(df$a)
mean(df$b)
mean(df$c)
mean(df$d)
View(df)
results <- vector("double", ncol(df))
for (i in seq_along(df)) {
results[[i]] <- mean(df[[i]])
}
results
means <- c(0, 5, 10) #create a vector of means
list.output <- vector("list", length(means)) #output
for (i in seq_along(means)) { #sequence
n <- sample(100, 1) #from 0:100, choose one random number
list.output[[i]] <- rnorm(n, means[[i]]) #generate a random normal distribution of n numbers, with mean from sequence
}
str(list.output)
output <- unlist(list.output) #combine together
print(output)
#A simple while loop that shows us how many tries it takes to get three heads in a row
flip <- function() sample(c("T", "H"), 1) #sample from "T"|"H" only once
flips <- 0
nheads <- 0 #these are both outputs
while (nheads < 3) { #sequence: continue looping while the number of flips results in "heads"
if (flip() == "H") { #another conditional: if the result of `flip()` is "H", then do something
nheads <- nheads + 1 #add 1 to the nheads vector
} else { #else do this
nheads <- 0 #reset to 0
}
flips <- flips + 1 #add 1 to flips as we iterate through the prior conditional
} #the while loop will stop once the first conditional is met
flips #print the number of flips needed; your number will be different
map_dbl(df, mean)
map_dbl(df, median)
map_dbl(df, sd)
map_dbl(df, mean)
map_dbl(df, median)
map_dbl(df, sd)
df %>%
map_dbl(mean)
df %>%
map_dbl(mean, trim = 0.5)
head(mtcars)
str(mtcars)
summary(mtcars)
unique(mtcars$cyl)
head(mtcars)
str(mtcars)
summary(mtcars)
unique(mtcars$cyl)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
summary(models)
summary(models[[1]]) #to access each element, use [[]]
summary(models[[2]])
summary(models[[3]])
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map("residuals")
mu <- list(5,10,25,50,100)
mu.df <- mu %>%
map(rnorm, n = 10)
str(mu.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
str(mu.sd.df)
m <- list(1,3,5,7,9)
args1 <- list(m, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
args2 <- list(mean = mu, sd = sigma, n = m)
args2 %>%
pmap(rnorm) %>%
str()
head(args1)
head(args2)
params <- tibble(
mean = unlist(mu),
sd = unlist(sigma),
n = unlist(m)
)
params
params %>%
pmap(rnorm)
View(params)
View(params)
x <- list(1, "a", 3)
x %>%
walk(print)
dir.create("images")
plots <- mtcars %>%
split(.$cyl) %>%
map(~ggplot(., aes(mpg, wt)) + geom_point())
paths <- stringr::str_c(names(plots), ".pdf") #generate strings of names
pwalk(list(paths, plots), ggsave, path = "images/")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
data <- cars
cars
library(tidyverse)
data <- diamonds
diamonds
diamonds %>%
group_by(cut, color) %>%
summarize(mPrice = mean(price))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price))
suppressMessages(library(tidyverse))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price))
suppressMessages(library(tidyverse))
data <- diamonds
diamonds
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(aes(stat = "identity"))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(main = "Pretty graph")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(title = "Pretty graph")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(title = "Not so Pretty graph")
setwd("~/Documents/Methods/Tutorials")
suppressMessages(library(tidyverse))
library(stringr)
str_subset(words, "x$") # search for all words ending in x
df <- tibble(word = words, i = seq_along(word))
df <- tibble(word = words, i = seq_along(word))
df %>%
filter(str_detect(words, "x$"))
str_count(fruits, "a")
fruits <- c("apple", "banana", "pear")
fruits
#match "an"
str_view(fruits, "an")
str_count(fruits, "a")
#on average how many vowels per word?
mean(str_count(words, "[aeiou]"))
df %>%
mutate(
vowels = str_count(word, "[aeiou]"),
consonants = str_count(word, "[^aeiou]")
)
length(sentences)
head(sentences)
colors <- c("red", "orange", "yellow", "green", "blue", "purple")
#to create a regular expression, we can collapse the vector into a singular expression with vertical pipes to indicate "or"
color_match <- str_c(colors, collapse = "|")
color_match
has_color <- str_subset(sentences, color_match)
matches <- str_extract(has_color, color_match)
head(matches)
more <- sentences[str_count(sentences, color_match) > 1]
str_view_all(more, color_match)
str_extract_all(more, color_match)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun) #gives full match
has_noun %>%
str_match(noun)
tibble(sentence = sentences) %>%
extract(
sentence, c("article", "noun"), #named columns
"(a|the) ([^ ])",
remove = FALSE
)
str_view_all(fruits, "(.).\\1.\\1")
str_view_all("barana", "(.).\\1.\\1")
str_view_all(fruits, "(..)\\1")
fruit <- c("banana", "coconut", "cucumber", "jujube", "papaya", "salal berry")
str_view_all(fruit, "(..)\\1")
suppressMessages(library(tidyverse))
library(stringr)
ex1 <- "how do you do?"
ex2 <- "good luck!"
ex1
ex2
string <- c("a", "b", "c")
string
string[3]
str_length(c("Happy Birthday", "¿Cuántos años tienes?", "g"))
str_c("a", "b", "c", "_", "x", "y", "z")
str_c("H", "a", "p", "p", "y", sep = ".")
colors <- c("red", "blue", "green")
str_sub(colors, 1, 2)
str_sub(colors, -2,-1)
fruits <- c("apple", "banana", "pear")
fruits
#match "an"
str_view(fruits, "an")
str_view(fruits, ".a.")
str_view(fruits, "^a")
str_view(fruits, "a$")
desserts <- c("apple pie", "apple", "apple tart")
str_view(desserts, "^apple$")
str_view(c("grey", "gray", "groy"), "gr(e|a)y")
x <- "1888 is the longest year in Roman numberals: MDCCCLXXXVIII"
x
str_view(x, "CC?")
str_view(x, "CC+")
str_view(x, "C[LX]+")
str_view(c("color","colour", "collar"), "colou?r")
str_view("banana", "ba(na)+")
str_view(x,"C{2}")
str_view(x, "C{2,}")
str_detect(fruits, "e")
str_detect(fruits, "e")
#words is a dataset with 1000 common words
#how many start with t?
sum(str_detect(words, "^t"))
#what proportion of words end with a vowel?
mean(str_detect(words, "[aeiou]$"))
str_subset(words, "x$") # search for all words ending in x
df <- tibble(word = words, i = seq_along(word))
df %>%
filter(str_detect(words, "x$"))
str_count(fruits, "a")
#on average how many vowels per word?
mean(str_count(words, "[aeiou]"))
df %>%
mutate(
vowels = str_count(word, "[aeiou]"),
consonants = str_count(word, "[^aeiou]")
)
length(sentences)
head(sentences)
colors <- c("red", "orange", "yellow", "green", "blue", "purple")
#to create a regular expression, we can collapse the vector into a singular expression with vertical pipes to indicate "or"
color_match <- str_c(colors, collapse = "|")
color_match
has_color <- str_subset(sentences, color_match)
matches <- str_extract(has_color, color_match)
head(matches)
more <- sentences[str_count(sentences, color_match) > 1]
str_view_all(more, color_match)
str_extract_all(more, color_match)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun) #gives full match
has_noun %>%
str_match(noun) #this instead produces a matrix
tibble(sentence = sentences) %>%
extract(
sentence, c("article", "noun"), #named columns
"(a|the) ([^ ])",
remove = FALSE #necessary to retain empty matches as well
)
fruit <- c("banana", "coconut", "cucumber", "jujube", "papaya", "salal berry")
str_view_all(fruit, "(..)\\1")
x <- c("apple", "pear", "banana")
str_replace(x, "[aeiou]", "-")
str_replace_all(x, "[aeiou]", "-")
z <- c("1 house", "2 cars", "3 people")
str_replace_all(z, c("1" = "one", "2" = "two", "3" = "three"))
sentences %>%
head(5) %>%
str_split(" ")
sentences %>%
str_replace("([^ ]+) ([^ ]+) ([^ ]+)", "\\1 \\3 \\2") %>%
head(5)
setnences %>%
head(5) %>%
str_split(" ", simplify = TRUE)
sentences %>%
head(5) %>%
str_split(" ", simplify = TRUE)
i <- "This is a sentence. This is another sentence."
str_view_all(i, boundary("word"))
str_split(i, " ")[[1]]
str_split(i, boundary("word"))[[1]]
apropos("replace")
apropos("replace")
head(dir(pattern = "\\.Rmd$"))
library(forcats)
x1 <- c("Dec", "Apr", "Jan", "Mar", "Jon")
#levels
month_levels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#levels
month_levels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#create factor
y1 <- factor(x1, levels = month_levels)
#levels
month_levels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#create factor
y1 <- factor(x1, levels = month_levels)
y1
y2 <- parse_factor(x1, levels = month_level)
y2 <- parse_factor(x1, levels = month_levels)
levels(y2)
gss_cat
gss_cat %>%
count(race)
ggplot(gss_cat, aes(race)) +
geom_bar()
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
relig <- gss_cat %>%
group_by(relig) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig, aes(tvhours, relig)) +
geom_point
relig <- gss_cat %>%
group_by(relig) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig, aes(tvhours, relig)) +
geom_point()
ggplot(relig, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
relig %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
rincome <- gss_cat %>%
group_by(rincome) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(rincome, aes(age, fct_reorder(rincome, age))) +
geom_point()
ggplot(rincome, aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n/sum(n))
ggplot(by_age, aes(age, prop, color = marital))
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n/sum(n))
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n/sum(n))
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(color = "marital")
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(color = "marital")
View(by_age)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(sum = sum(n))
View(by_age)
View(by_age)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
#count() %>%
mutate(sum = sum(n))
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
group_by(age) %>%
mutate(sum = sum(n))
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
View(by_age)
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
group_by(age) %>%
mutate(sum = sum(n), prop = n/sum)
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(color = "marital")
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>% count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong"  = "Strong republican",
"Republican, weak"  = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
colors
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat",
"Other"                 = "No answer",
"Other"                 = "Don't know",
"Other"                 = "Other party"
)) %>%
count(partyid)
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"),
dem = c("Not str democrat", "Strong democrat")
)) %>%
count(partyid)
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = TRUE) %>%
print(n = Inf)
?rename
levels(gss_cat$relig)
