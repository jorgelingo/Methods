unique(mtcars$cyl)
head(mtcars)
str(mtcars)
summary(mtcars)
unique(mtcars$cyl)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
str(models)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
summary(models)
summary(models[[1]])
summary(models[[1]]) #to access each element, use [[]]
summary(models[[2]])
summary(models[[3]])
models <-
map(summary)
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map_dbl("Coefficients")
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map("Coefficients")
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map("residuals")
mu <- list(5,10,25,50,100)
mu.df <- mu %>%
map(rnorm, n = 10)
str(mu.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
str(mu.sd.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
str(mu.sd.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
head(mu.sd.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
str(mu.sd.df)
m <- list(1,3,5,7,9)
args1 <- list(m, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
m <- list(1,3,5,7,9)
args1 <- list(m, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
#arguments can be named as well to help clarify code
args2 <- list(mean = mu, sd = sigma, n = m)
args2 %>%
pmap(rnorm) %>%
str()
m <- list(1,3,5,7,9)
args1 <- list(m, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
#arguments can be named as well to help clarify code
args2 <- list(mean = mu, sd = sigma, n = m)
args2 %>%
pmap(rnorm) %>%
str()
head(args1)
head(args2)
params <- tribble(mu, sigma, m)
params <- tribble(
mu = mu,
sigma = sigma,
m = m
)
m
params <- tribble(
mu = unlist(mu),
sigma = unlist(sigma),
m = unlist(m)
)
m
params <- tribble(
mu = unlist(mu),
sigma = unlist(sigma)#,
#m = unlist(m)
)
mu
unlist(mu)
unlist(sigma)
unlist(m)
params <- tibble(
mu = unlist(mu),
sigma = unlist(sigma),
m = unlist(m)
)
params
params <- tibble(
mu = unlist(mu),
sigma = unlist(sigma),
m = unlist(m)
)
params
params %>%
pmap(rnorm)
params <- tibble(
mean = unlist(mu),
sd = unlist(sigma),
n = unlist(m)
)
params
params %>%
pmap(rnorm)
x <- list(1, "a", 3)
x %>%
walk(print)
dir.crate("images")
dir.create("images")
dir.create("images")
plots <- mtcars %>%
split(.$cyl) %>%
map(~ggplot(., aes(mpg, wt)) + geom_point())
paths <- stringr::str_c(names(plots), ".pdf") #generate strings of names
pwalk(list(paths, plots), ggsave, path = "images/")
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
str(df)
mean(df$a)
mean(df$b)
mean(df$c)
mean(df$d)
View(df)
results <- vector("double", ncol(df))
for (i in seq_along(df)) {
results[[i]] <- mean(df[[i]])
}
results
means <- c(0, 5, 10) #create a vector of means
list.output <- vector("list", length(means)) #output
for (i in seq_along(means)) { #sequence
n <- sample(100, 1) #from 0:100, choose one random number
list.output[[i]] <- rnorm(n, means[[i]]) #generate a random normal distribution of n numbers, with mean from sequence
}
str(list.output)
output <- unlist(list.output) #combine together
print(output)
#A simple while loop that shows us how many tries it takes to get three heads in a row
flip <- function() sample(c("T", "H"), 1) #sample from "T"|"H" only once
flips <- 0
nheads <- 0 #these are both outputs
while (nheads < 3) { #sequence: continue looping while the number of flips results in "heads"
if (flip() == "H") { #another conditional: if the result of `flip()` is "H", then do something
nheads <- nheads + 1 #add 1 to the nheads vector
} else { #else do this
nheads <- 0 #reset to 0
}
flips <- flips + 1 #add 1 to flips as we iterate through the prior conditional
} #the while loop will stop once the first conditional is met
flips #print the number of flips needed; your number will be different
map_dbl(df, mean)
map_dbl(df, median)
map_dbl(df, sd)
map_dbl(df, mean)
map_dbl(df, median)
map_dbl(df, sd)
df %>%
map_dbl(mean)
df %>%
map_dbl(mean, trim = 0.5)
head(mtcars)
str(mtcars)
summary(mtcars)
unique(mtcars$cyl)
head(mtcars)
str(mtcars)
summary(mtcars)
unique(mtcars$cyl)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
summary(models)
summary(models[[1]]) #to access each element, use [[]]
summary(models[[2]])
summary(models[[3]])
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl("r.squared")
models %>%
map(summary) %>%
map("residuals")
mu <- list(5,10,25,50,100)
mu.df <- mu %>%
map(rnorm, n = 10)
str(mu.df)
sigma <- list(1, 3, 5, 2, .5)
mu.sd.df <- map2(mu, sigma, rnorm, n = 10)
str(mu.sd.df)
m <- list(1,3,5,7,9)
args1 <- list(m, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
args2 <- list(mean = mu, sd = sigma, n = m)
args2 %>%
pmap(rnorm) %>%
str()
head(args1)
head(args2)
params <- tibble(
mean = unlist(mu),
sd = unlist(sigma),
n = unlist(m)
)
params
params %>%
pmap(rnorm)
View(params)
View(params)
x <- list(1, "a", 3)
x %>%
walk(print)
dir.create("images")
plots <- mtcars %>%
split(.$cyl) %>%
map(~ggplot(., aes(mpg, wt)) + geom_point())
paths <- stringr::str_c(names(plots), ".pdf") #generate strings of names
pwalk(list(paths, plots), ggsave, path = "images/")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
data <- cars
cars
library(tidyverse)
data <- diamonds
diamonds
diamonds %>%
group_by(cut, color) %>%
summarize(mPrice = mean(price))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price))
suppressMessages(library(tidyverse))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price))
suppressMessages(library(tidyverse))
data <- diamonds
diamonds
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(aes(stat = "identity"))
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(main = "Pretty graph")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(title = "Pretty graph")
diamonds %>%
group_by(cut) %>%
summarize(mPrice = mean(price)) %>%
ggplot(data = ., aes(x = cut, y = mPrice)) +
geom_bar(stat = "identity") +
labs(title = "Not so Pretty graph")
sum(61390.42,25269.27,11105.59)
97765.28+11131.21
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
a <- c(2,5,7,9,12)
mean(a)
median(a)
a <- c(2,5,7,9,12)
mean(a)
median(a)
b <- c(2,6,7,13,15)
mean(b)
median(b)
a <- c(2,5,7,9,12)
mean(a)
median(a)
b <- c(2,6,7,18,20)
mean(b)
median(b)
plot(x, df(x = x, df1 = 1, df2 = 1))
x = seq(0, 5, length = 100)
plot(x, df(x = x, df1 = 1, df2 = 1))
x = seq(0, 5, length = 100)
plot(x, df(x = x, df1 = 1, df2 = 20))
plot(x, df(x = x, df1 = 5, df2 = 100))
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- cbind(x,y)
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(x = mean(y)), color = "red") +
geom_vline(aes(x = median(y)), color = "blue")
x = seq(0, 5, length = 100)
y = as.data.frame(df(x = x, df1 = 5, df2 = 100))
df <- cbind(x,y)
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(x = mean(y)), color = "red") +
geom_vline(aes(x = median(y)), color = "blue")
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(x = mean(y)), color = "red") +
geom_vline(aes(x = median(y)), color = "blue")
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(xintercept = mean(y)), color = "red") +
geom_vline(aes(xintercept = median(y)), color = "blue")
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point() + x
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(xintercept = mean(x)), color = "red") +
geom_vline(aes(xintercept = median(x)), color = "blue")
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point() +
geom_vline(aes(xintercept = mean(x)), color = "red") +
geom_vline(aes(xintercept = median(x)), color = "blue")
mean(x)
median(x)
mean(y)
median(y)
View(df)
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x, y)) +
geom_point()
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(x)) +
geom_freqpoly()
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(t)) +
geom_freqpoly()
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_freqpoly()
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram()
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
histogram()
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram()
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram() +
stat_summary(fun.y = mean, geom = "vline", color = "red") +
stat_summary(fun.y = mean, geom = "vline", color = "blue")
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram() +
stat_summary(fun.x = mean, geom = "vline", color = "red") +
stat_summary(fun.x = mean, geom = "vline", color = "blue")
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram() +
geom_vline(aes(xintercept = mean(y)), color = "red")
x = seq(0, 5, length = 100)
y = rnorm(n = 100, mean = 2.5)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram() +
geom_vline(aes(xintercept = mean(y)), color = "red", size = 2) +
geom_vline(aes(xintercept = median(y)), color = "blue")
x = seq(0, 5, length = 100)
y = df(x = x, df1 = 5, df2 = 100)
df <- as.data.frame(cbind(x,y))
ggplot(df, aes(y)) +
geom_histogram() +
geom_vline(aes(xintercept = mean(y)), color = "red", size = 2) +
geom_vline(aes(xintercept = median(y)), color = "blue")
y <- rnorm(n = 100, mean = 50, sd = 25)
z <- rnorm(n = 100, mean = 50, sd = 10)
df <- as.data.frame(cbind(y,z))
ggplot(df, aes(x = y)) +
geom_histogram()
ggplot(df, aes(x = z)) +
geom_histogram()
y <- rnorm(n = 100, mean = 50, sd = 25)
z <- rnorm(n = 100, mean = 50, sd = 10)
df <- as.data.frame(cbind(y,z))
ggplot(df, aes(x = y)) +
geom_histogram() +
ylim(c(0,100))
y <- rnorm(n = 100, mean = 50, sd = 25)
z <- rnorm(n = 100, mean = 50, sd = 10)
df <- as.data.frame(cbind(y,z))
ggplot(df, aes(x = y)) +
geom_histogram() +
xlim(c(0,100))
ggplot(df, aes(x = z)) +
geom_histogram() +
xlim(c(0,100))
setwd("~/Documents/Methods/Tutorials/data")
cs_reading <- rea.csv("L2CS_Word8_Ps11_20.csv")
library(tidyverse)
cs_reading <- read.csv("L2CS_Word8_Ps11_20.csv")
str(cs_reading)
names(cs_reading)
names(cs_reading)
levels(cs_reading$sentence_type)
cs_reading2 <- cs_reading %>%
select(RECORDING_SESSION_LABEL, aux_type, switch_type, sentence_type, button_RT, response_accuracy, GAZE_DURATION, REGRESSION_PATH_DURATION, TOTAL_DURATION)
head(cs_reading2)
cs_reading2 <- cs_reading %>%
select(RECORDING_SESSION_LABEL, aux_type, switch_type, sentence_type, button_RT, response_accuracy, GAZE_DURATION, REGRESSION_PATH_DURATION, TOTAL_DURATION)
head(cs_reading2)
names(cs_reading)
names(cs_reading)[1] <- "RECORDING_SESSION_LABEL"
head(cs_reading)
cs_reading3 <- cs_reading2 %>%
filter(sentence_type == "Experimental")
head(cs_reading3)
cs_reading3 <- cs_reading2 %>%
filter(sentence_type == "Experimental" & response_accuracy == "correct")
head(cs_reading3)
cs_summary <- cs_reading3 %>%
group_by(aux_type, switch_type) %>%
summarize(mGAZE_DURATION = mean(GAZE_DURATION), mREGRESSION_PATH_DURATION = mean(REGRESSION_PATH_DURATION), mTOTAL_DURATION = mean(TOTAL_DURATION), sdGAZE_DURATION = sd(GAZE_DURATION), sdREGRESSION_PATH_DURATION = sd(REGRESSION_PATH_DURATION), sdTOTAL_DURATION = sd(TOTAL_DURATION))
cs_summary
cs_reading3$button_RT <- as.integer(cs_reading3$button_RT)
buttonrt_summary <- cs_reading3 %>%
group_by(aux_type, switch_type) %>%
summarize(mbuttonRT = mean(button_RT), sdbuttonRT = sd(button_RT))
cs_reading3$button_RT <- as.integer(cs_reading3$button_RT)
buttonrt_summary <- cs_reading3 %>%
group_by(aux_type, switch_type) %>%
summarize(mbuttonRT = mean(button_RT), sdbuttonRT = sd(button_RT))
buttonrt_summary
ggplot(buttonrt_summary, aes(aux_type, mbuttonRT, fill = switch_type)) +
geom_bar(stat = "identity", position = "dodge")
ggplot(buttonrt_summary, aes(aux_type, mbuttonRT, fill = switch_type)) +
geom_bar(position = "dodge")
ggplot(buttonrt_summary, aes(aux_type, mbuttonRT, fill = switch_type)) +
geom_bar(stat = "identity")
ggplot(buttonrt_summary, aes(aux_type, mbuttonRT, fill = switch_type)) +
geom_bar(stat = "identity", position = "dodge")
